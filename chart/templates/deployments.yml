---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "caddy.name" . }}
  labels:
    {{- include "caddy.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "caddy.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "caddy.selectorLabels" . | nindent 8 }}
    spec:
      # This Deployment uses a persistent volume claim. This requires
      # that in order to enable rolling updates (i.e. use a deployment
      # strategy other than Replace), we schedule the new Pod to the
      # same node as the original Pod.
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                    - {{ include "caddy.name" . }}
              topologyKey: "kubernetes.io/hostname"
      containers:
        - name: {{ include "caddy.name" . }}
          image: "{{ .Values.caddy.image.repository }}/{{ .Values.caddy.image.name }}:{{ .Values.caddy.image.tag }}"
          securityContext:
            allowPrivilegeEscalation: true
          volumeMounts:
            - mountPath: /etc/caddy/
              name: config
            - mountPath: /data/
              name: data
          ports:
            - containerPort: 80
            - containerPort: 443
      volumes:
        - name: config
          configMap:
            name: {{ include "caddy.fullname" . }}-config

      {{- if .Values.caddy.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "caddy.fullname" . }}
      {{- else }}
        - name: data
          emptyDir: {}
      {{- end }}


{{- if .Values.elasticsearch.use_incluster_service }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "elasticsearch.fullname" . }}
  labels:
    {{- include "elasticsearch.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "elasticsearch.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "elasticsearch.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ include "elasticsearch.name" . }}
          image: "{{ .Values.elasticsearch.incluster.image.repository }}/{{ .Values.elasticsearch.incluster.image.name }}:{{ .Values.elasticsearch.incluster.image.tag }}"
          env:
            - name: cluster.name
              value: "openedx"
            - name: bootstrap.memory_lock
              value: "true"
            - name: discovery.type
              value: "single-node"
            - name: ES_JAVA_OPTS
              value: "-Xms1g -Xmx1g"
            - name: TAKE_FILE_OWNERSHIP
              value: "1"
          ports:
            - containerPort: 9200
          securityContext:
            allowPrivilegeEscalation: false
          volumeMounts:
            - mountPath: /usr/share/elasticsearch/data
              name: data
      volumes:
      {{- if .Values.elasticsearch.incluster.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "elasticsearch.fullname" . }}
      {{- else }}
        - name: data
          emptyDir: {}
      {{- end }}
{{- end }}


{{- if .Values.mongodb.use_incluster_service }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mongodb.fullname" . }}
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "mongodb.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "mongodb.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ include "mongodb.name" . }}
          image: "{{ .Values.mongodb.incluster.image.repository }}/{{ .Values.mongodb.incluster.image.name }}:{{ .Values.mongodb.incluster.image.tag }}"
          args: ["mongod", "--storageEngine", "wiredTiger"]
          ports:
            - containerPort: 27017
          volumeMounts:
            - mountPath: /data/db
              name: data
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
      {{- if .Values.mongodb.incluster.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "mongodb.fullname" . }}
      {{- else }}
        - name: data
          emptyDir: {}
      {{- end }}
{{- end }}


{{- if .Values.redis.use_incluster_service }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "redis.fullname" . }}
  labels:
    {{- include "redis.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "redis.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "redis.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ include "redis.name" . }}
          image: "{{ .Values.redis.incluster.image.repository }}/{{ .Values.redis.incluster.image.name }}:{{ .Values.redis.incluster.image.tag }}"
          args: ["redis-server", "/openedx/redis/config/redis.conf"]
          workingDir: /openedx/redis/data
          ports:
            - containerPort: 6379
          volumeMounts:
            - mountPath: /openedx/redis/config/
              name: config
            - mountPath: /openedx/redis/data
              name: data
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: config
          configMap:
            name: {{ include "redis.fullname" . }}-config

      {{- if .Values.redis.incluster.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "redis.fullname" . }}
      {{- else }}
        - name: data
          emptyDir: {}
      {{- end }}
{{- end }}


{{- if .Values.mysql.use_incluster_service }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mysql.fullname" . }}
  labels:
    {{- include "mysql.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "mysql.selectorLabels" . | nindent 6 }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        {{- include "mysql.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ include "mysql.name" . }}
          image: "{{ .Values.mysql.incluster.image.repository }}/{{ .Values.mysql.incluster.image.name }}:{{ .Values.mysql.incluster.image.tag }}"
          # Note the ignore-db-dir: this is because ext4 volumes are created with a lost+found directory in them, which causes mysql
          # initialisation to fail
          args: ["mysqld", "--character-set-server=utf8mb3", "--collation-server=utf8mb3_general_ci", "--binlog-expire-logs-seconds=259200"]
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: {{ .Values.mysql.incluster.root_password }}
            - name: MYSQL_DATABASE
              value: {{ .Values.mysql.incluster.db_name }}
            - name: MYSQL_USER
              value: {{ .Values.mysql.incluster.db_user }}
            - name: MYSQL_PASSWORD
              value: {{ .Values.mysql.incluster.db_password }}
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: data
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
      {{- if .Values.mysql.incluster.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "mysql.fullname" . }}
      {{- else }}
        - name: data
          emptyDir: {}
      {{- end }}
{{- end }}


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "clamav.fullname" . }}
  labels:
    {{- include "clamav.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "clamav.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "clamav.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ include "clamav.name" . }}
          image: "{{ .Values.clamav.image.repository }}/{{ .Values.clamav.image.name }}:{{ .Values.clamav.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 3310
          resources:
            requests:
              cpu: {{ .Values.clamav.hpa.cpuTarget }}
              memory: {{ .Values.clamav.hpa.memTarget }}
            limits:
              cpu: {{ .Values.clamav.hpa.cpuLimit }}
              memory: {{ .Values.clamav.hpa.memLimit }}


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "forum.fullname" . }}
  labels:
    {{- include "forum.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "forum.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "forum.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ include "forum.name" . }}
          image: "{{ .Values.forum.image.repository }}/{{ .Values.forum.image.name }}:{{ .Values.forum.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 4567
          env:
            - name: SEARCH_SERVER
              value: {{- if .Values.elasticsearch.use_incluster_service }} "http://{{ .Release.Name }}-elasticsearch:9200" {{- else }} "https://{{ .Values.elasticsearch.managed.host }}:{{ .Values.elasticsearch.managed.port }}" {{- end }}
            - name: MONGODB_AUTH
              value: {{- if .Values.mongodb.use_incluster_service }} "" {{- else }} "{{ .Values.mongodb.managed.forum.auth }}" {{- end }}
            - name: MONGODB_HOST
              value: {{- if .Values.mongodb.use_incluster_service }} "{{ .Release.Name }}-mongodb" {{- else }} "{{ .Values.mongodb.managed.forum.host }}" {{- end }}
            - name: MONGODB_PORT
              value: {{- if .Values.mongodb.use_incluster_service }} "27017" {{- else }} "{{ .Values.mongodb.managed.forum.port | int }}" {{- end }}
            - name: MONGODB_DATABASE
              value: {{- if .Values.mongodb.use_incluster_service }} "cs_comments_service" {{- else }} "{{ .Values.mongodb.managed.forum.db }}" {{- end }}
            - name: MONGOID_USE_SSL
              value: {{- if .Values.mongodb.use_incluster_service }} "false" {{- else }} "{{ .Values.mongodb.managed.forum.use_ssl }}" {{- end }}
            - name: MONGOID_AUTH_SOURCE
              value: "admin"
            - name: MONGOID_AUTH_MECH
              value: {{- if .Values.mongodb.use_incluster_service }} "" {{- else }} "{{ .Values.mongodb.managed.forum.auth_mech }}" {{- end }}


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mfe.fullname" . }}
  labels:
    {{- include "mfe.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "mfe.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "mfe.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ include "mfe.name" . }}
          image: "{{ .Values.mfe.image.repository }}/{{ .Values.mfe.image.name }}:{{ .Values.mfe.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8002
          volumeMounts:
            - mountPath: /etc/caddy/
              name: config
      volumes:
        - name: config
          configMap:
            name: {{ include "mfe.fullname" . }}-caddy-config


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "cms-worker.fullname" . }}
  labels:
    {{- include "cms-worker.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "cms-worker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "cms-worker.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - image: {{ include "openedx.image" . }}
          imagePullPolicy: Always
          name: {{ include "cms-worker.name" . }}
          args: ["celery", "--app=cms.celery", "worker", "--loglevel=info", "--hostname=edx.cms.core.default.%%h", "--max-tasks-per-child", "100", "--exclude-queues=edx.lms.core.default"]
          env:
          - name: SERVICE_VARIANT
            value: cms
          - name: DJANGO_SETTINGS_MODULE
            value: cms.envs.tutor.production
          volumeMounts:
            - mountPath: /openedx/edx-platform/lms/envs/tutor/
              name: settings-lms
            - mountPath: /openedx/edx-platform/cms/envs/tutor/
              name: settings-cms
            - mountPath: /openedx/config
              name: config
            - mountPath: /openedx/data
              name: data
            - mountPath: /openedx/data/logs
              name: data-logs
            - mountPath: /openedx/media/
              name: media
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: settings-lms
          configMap:
            name: {{ include "openedx.fullname" . }}-settings-lms
        - name: settings-cms
          configMap:
            name: {{ include "openedx.fullname" . }}-settings-cms
        - name: config
          configMap:
            name: {{ include "openedx.fullname" . }}-config

      {{- if .Values.openedx.data.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "openedx.fullname" . }}-data
      {{- else }}
        - name: data
          emptyDir: {}
      {{- end }}

      {{- if .Values.openedx.logs.persistence.enabled }}
        - name: data-logs
          persistentVolumeClaim:
            claimName: {{ include "openedx.fullname" . }}-logs
      {{- else }}
        - name: data-logs
          emptyDir: {}
      {{- end }}

      {{- if .Values.openedx.media.persistence.enabled }}
        - name: media
          persistentVolumeClaim:
            claimName: {{ include "openedx.fullname" . }}-media
      {{- else }}
        - name: media
          emptyDir: {}
      {{- end }}


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "lms-worker.fullname" . }}
  labels:
    {{- include "lms-worker.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "lms-worker.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "lms-worker.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - image: {{ include "openedx.image" . }}
          imagePullPolicy: Always
          name: {{ include "lms-worker.name" . }}
          args: ["celery", "--app=lms.celery", "worker", "--loglevel=info", "--hostname=edx.lms.core.default.%%h", "--max-tasks-per-child=100", "--exclude-queues=edx.cms.core.default"]
          env:
          - name: SERVICE_VARIANT
            value: lms
          - name: DJANGO_SETTINGS_MODULE
            value: lms.envs.tutor.production
          volumeMounts:
            - mountPath: /openedx/edx-platform/lms/envs/tutor/
              name: settings-lms
            - mountPath: /openedx/edx-platform/cms/envs/tutor/
              name: settings-cms
            - mountPath: /openedx/config
              name: config
            - mountPath: /openedx/data
              name: data
            - mountPath: /openedx/data/logs
              name: data-logs
            - mountPath: /openedx/media/
              name: media
            - mountPath: /openedx/data/modulestore
              name: modulestore
            - mountPath: /openedx/data/ora2
              name: ora2
          securityContext:
            allowPrivilegeEscalation: false
      volumes:
        - name: settings-lms
          configMap:
            name: {{ include "openedx.fullname" . }}-settings-lms
        - name: settings-cms
          configMap:
            name: {{ include "openedx.fullname" . }}-settings-cms
        - name: config
          configMap:
            name: {{ include "openedx.fullname" . }}-config

      {{- if .Values.openedx.data.persistence.enabled }}
        - name: data
          persistentVolumeClaim:
            claimName: {{ include "openedx.fullname" . }}-data
      {{- else }}
        - name: data
          emptyDir: {}
      {{- end }}

      {{- if .Values.openedx.logs.persistence.enabled }}
        - name: data-logs
          persistentVolumeClaim:
            claimName: {{ include "openedx.fullname" . }}-logs
      {{- else }}
        - name: data-logs
          emptyDir: {}
      {{- end }}

      {{- if .Values.openedx.media.persistence.enabled }}
        - name: media
          persistentVolumeClaim:
            claimName: {{ include "openedx.fullname" . }}-media
      {{- else }}
        - name: media
          emptyDir: {}
      {{- end }}

      {{- if .Values.openedx.modulestore.persistence.enabled }}
        - name: modulestore
          persistentVolumeClaim:
            claimName: {{ include "openedx.fullname" . }}-modulestore
      {{- else }}
        - name: modulestore
          emptyDir: {}
      {{- end }}

      {{- if .Values.openedx.ora2.persistence.enabled }}
        - name: ora2
          persistentVolumeClaim:
            claimName: {{ include "openedx.fullname" . }}-ora2
      {{- else }}
        - name: ora2
          emptyDir: {}
      {{- end }}
